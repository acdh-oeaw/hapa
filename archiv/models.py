# generated by appcreator
import json
from django.db import models
from django.urls import reverse
from django.contrib.gis.db.models import PointField, PolygonField
from django.contrib.gis.geos import Point
from django.core.serializers import serialize
from ckeditor.fields import RichTextField
from taggit.managers import TaggableManager

from vocabs.models import SkosConcept
from gn_places.models import GeoNamesPlace
from bib.models import ZotItem


from browsing.browsing_utils import model_to_dict


def set_extra(self, **kwargs):
    self.extra = kwargs
    return self


models.Field.set_extra = set_extra


class HapaBeleg(models.Model):
    """Beleg"""

    zotero_id = models.ForeignKey(
        ZotItem,
        related_name="rvn_hapabeleg_zotero_id_zotitem",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Zoteroeintrag",
        help_text="Zoteroeintrag",
    ).set_extra(
        is_public=True,
    )
    text = RichTextField(
        blank=True,
        null=True,
        verbose_name="Textauszug",
        help_text="ausgewähltes Quellenzitaten",
    ).set_extra(
        is_public=True,
    )
    page_nr = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="genaue Stelle",
        help_text="z.B. S. 44-46",
    ).set_extra(
        is_public=True,
    )
    short_quote = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Kurzzitat",
        help_text="wird automatisch aus verknüpftem Zotero Eintrag übernommen",
    ).set_extra(
        is_public=True,
    )
    full_quote = models.TextField(
        blank=True,
        null=True,
        verbose_name="Vollzitat",
        help_text="wird automatisch aus verknüpftem Zotero Eintrag übernommen",
    ).set_extra(
        is_public=True,
    )
    time_of_origin_start = models.IntegerField(
        blank=True,
        null=True,
        verbose_name="Zeitliche Einordnung (Beginn)",
        help_text="Jahreszahl, z.B. 800 für 9. Jh",
    ).set_extra(
        is_public=True,
    )
    time_of_origin_end = models.IntegerField(
        blank=True,
        null=True,
        verbose_name="Zeitliche Einordnung (Ende)",
        help_text="Jahreszahl, z.B. 899 für 9. Jh",
    ).set_extra(
        is_public=True,
    )
    tags = TaggableManager(blank=True)
    comment = RichTextField(
        blank=True,
        null=True,
        verbose_name="Kommentar",
        help_text="Kommentar",
    ).set_extra(
        is_public=True,
    )
    internal_comment = RichTextField(
        blank=True,
        null=True,
        verbose_name="Kommentar (intern)",
        help_text="Kommentar (intern)",
    ).set_extra(
        is_public=False,
    )
    unclear = models.BooleanField(
        default=False, help_text="Eintrag mit offenen Fragen", verbose_name="unklar"
    )
    orig_data_csv = models.TextField(
        blank=True, null=True, verbose_name="The original data"
    ).set_extra(is_public=True)

    class Meta:

        ordering = ["short_quote", "page_nr"]
        verbose_name = "Beleg"

    def __str__(self):
        if self.short_quote and self.zotero_id:
            quote = f"[{self.id}] {self.short_quote} "
        else:
            quote = f"[{self.id}]"
        if self.page_nr:
            return f" {quote}, {self.page_nr} "
        else:
            return f"{quote}"

    def save(self, *args, **kwargs):
        if self.zotero_id:
            self.full_quote = self.zotero_id.zot_bibtex
            self.short_quote = f"{self.zotero_id.author}, {self.zotero_id.zot_title}"
        super(HapaBeleg, self).save(*args, **kwargs)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse("archiv:hapabeleg_browse")

    @classmethod
    def get_source_table(self):
        return None

    @classmethod
    def get_natural_primary_key(self):
        return "id"

    @classmethod
    def get_createview_url(self):
        return reverse("archiv:hapabeleg_create")

    def get_absolute_url(self):
        return reverse("archiv:hapabeleg_detail", kwargs={"pk": self.id})

    def get_delete_url(self):
        return reverse("archiv:hapabeleg_delete", kwargs={"pk": self.id})

    def get_edit_url(self):
        return reverse("archiv:hapabeleg_edit", kwargs={"pk": self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse("archiv:hapabeleg_detail", kwargs={"pk": next.first().id})
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by("-id")
        if prev:
            return reverse("archiv:hapabeleg_detail", kwargs={"pk": prev.first().id})
        return False


class HapaPlaceName(models.Model):
    """Ortsname"""

    name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Name",
        help_text="Standardisierte Namensansetzung",
    ).set_extra(
        is_public=True,
        arche_prop="hasTitle",
    )
    alternative_names = models.TextField(
        blank=True,
        verbose_name="Alternative Namen",
        help_text="Alternative Namen, verwende '; ' als Trennzeichen",
    ).set_extra(
        is_public=True,
        arche_prop="hasAlternativeTitle",
    )
    historic_names = models.TextField(
        blank=True,
        verbose_name="Historische(r) Name(n)",
        help_text="Historische(r) Name(n), verwende '; ' als Trennzeichen",
    ).set_extra(
        is_public=True,
    )
    geonames = models.ForeignKey(
        GeoNamesPlace,
        related_name="rvn_hapaplacename_geonames_geonamesplace",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="GeoNames Eintrag",
        help_text="Name für Ort in GeoNames",
    ).set_extra(
        is_public=True,
        arche_prop="hasNonLinkedId",
        arche_prop_str_template="GeoNames ID: <value>",
    )
    beleg = models.ManyToManyField(
        "HapaBeleg",
        related_name="rvn_hapaplacename_beleg_beleg",
        blank=True,
        verbose_name="Beleg",
        help_text="Dokumentation der Belege mit ausgewählten Quellenzitaten",
    ).set_extra(
        is_public=True,
    )
    wortbildung = RichTextField(
        blank=True,
        null=True,
        verbose_name="Wortbildung",
        help_text="Besprechung der Wortbildung des Ortsnamens",
    ).set_extra(
        is_public=True,
    )
    etymology = RichTextField(
        blank=True,
        null=True,
        verbose_name="Etymologie",
        help_text="Besprechung der Etymologie des Ortsnamens",
    ).set_extra(
        is_public=True,
    )
    syntax = RichTextField(
        blank=True,
        null=True,
        verbose_name="Syntax",
        help_text="Besprechung der Syntax des Ortsnamens",
    ).set_extra(
        is_public=True,
    )
    orig_sprache = models.ForeignKey(
        SkosConcept,
        related_name="rvn_hapaplacename_orig_sprache_skosconcept",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Sprache",
        help_text="welcher Sprache entstammt der Ortsname",
    ).set_extra(
        is_public=True,
        arche_prop="hasLanguage",
    )
    lat = models.FloatField(
        blank=True,
        null=True,
        verbose_name="Breitengrad",
        help_text="Latitude",
    ).set_extra(
        is_public=True,
    )
    long = models.FloatField(
        blank=True,
        null=True,
        verbose_name="Längengrad",
        help_text="Longitude",
    ).set_extra(
        is_public=True,
    )
    point = PointField(
        blank=True,
        null=True,
        verbose_name="Koordinaten",
        help_text="Wird aus den Angaben von Beiten- und Längengrad befüllt)",
    ).set_extra(
        is_public=True,
        arche_prop="hasWkt",
    )
    fuzzy_geom = PolygonField(
        blank=True,
        null=True,
        verbose_name="Ungefähre Ortsangabe",
        help_text="Ungefähre Lokalisierung historischer Orte",
    ).set_extra(
        is_public=True,
        arche_prop="hasWkt",
    )
    adm_unit = models.ForeignKey(
        SkosConcept,
        related_name="rvn_hapaplacename_adm_unit_skosconcept",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Administrative Einheit",
        help_text="Angabe der politisch-administrativen Verortung in Region, Bezirk, Kreis, usw.",
    ).set_extra(
        is_public=True,
    )
    historic = models.BooleanField(
        default=False,
        help_text="Historischer Ort bedeutet es gibt diesen Ort heute nicht mehr",
        verbose_name="Historischer Ort",
    )
    tags = TaggableManager(blank=True)
    comment = RichTextField(
        blank=True,
        null=True,
        verbose_name="Kommentar",
        help_text="Kommentar",
    ).set_extra(
        is_public=True,
    )
    internal_comment = RichTextField(
        blank=True,
        null=True,
        verbose_name="Kommentar (intern)",
        help_text="Kommentar (intern)",
    ).set_extra(
        is_public=False,
    )
    unclear = models.BooleanField(
        default=False, help_text="Eintrag mit offenen Fragen", verbose_name="unklar"
    )
    orig_data_csv = models.TextField(
        blank=True, null=True, verbose_name="The original data"
    ).set_extra(is_public=True)

    class Meta:

        ordering = [
            "name",
        ]
        verbose_name = "Ortsname"

    def save(self, *args, **kwargs):
        if not self.lat and self.geonames:
            self.lat = self.geonames.gn_lat
            self.long = self.geonames.gn_long
        if self.lat and self.long and not self.point:
            self.point = Point(self.long, self.lat)
        if self.point:
            self.long, self.lat = self.point.coord_seq[0]

        super(HapaPlaceName, self).save(*args, **kwargs)

    def __str__(self):
        if self.name:
            return "{}".format(self.name)
        else:
            return "{}".format(self.id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse("archiv:hapaplacename_browse")

    @classmethod
    def get_source_table(self):
        return None

    @classmethod
    def get_natural_primary_key(self):
        return "id"

    @classmethod
    def get_createview_url(self):
        return reverse("archiv:hapaplacename_create")

    def get_absolute_url(self):
        return reverse("archiv:hapaplacename_detail", kwargs={"pk": self.id})

    def get_delete_url(self):
        return reverse("archiv:hapaplacename_delete", kwargs={"pk": self.id})

    def get_edit_url(self):
        return reverse("archiv:hapaplacename_edit", kwargs={"pk": self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                "archiv:hapaplacename_detail", kwargs={"pk": next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by("-id")
        if prev:
            return reverse(
                "archiv:hapaplacename_detail", kwargs={"pk": prev.first().id}
            )
        return False

    def as_geojson(self):
        geom_field = "point"
        if self.fuzzy_geom:
            geom_field = "fuzzy_geom"
        output = serialize(
            "geojson",
            HapaPlaceName.objects.filter(id=self.id),
            geometry_field=geom_field,
            fields=(
                "id",
                "name",
            ),
        )
        return json.loads(output)["features"][0]

    def geojson_id(self):
        return f"geojson-{self.id}"

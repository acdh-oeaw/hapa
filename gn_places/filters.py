# generated by appcreator
import django_filters
from django import forms

from dal import autocomplete

from vocabs.filters import generous_concept_filter
from vocabs.models import SkosConcept
from . models import (
    GeoNamesPlace
)


class GeoNamesPlaceListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=GeoNamesPlace._meta.get_field('legacy_id').help_text,
        label=GeoNamesPlace._meta.get_field('legacy_id').verbose_name
    )
    gn_name = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=GeoNamesPlace._meta.get_field('gn_name').help_text,
        label=GeoNamesPlace._meta.get_field('gn_name').verbose_name
    )
    gn_feature_class = django_filters.ModelMultipleChoiceFilter(
        queryset=SkosConcept.objects.filter(
            collection__name="gn_feature_class"
        ),
        help_text=GeoNamesPlace._meta.get_field('gn_feature_class').help_text,
        label=GeoNamesPlace._meta.get_field('gn_feature_class').verbose_name,
        method=generous_concept_filter,
        widget=autocomplete.Select2Multiple(
            url="/vocabs-ac/specific-concept-ac/gn_feature_class",
            attrs={
                'data-placeholder': 'Autocomplete ...',
                'data-minimum-input-length': 2,
                },
        )
    )
    gn_feature_code = django_filters.ModelMultipleChoiceFilter(
        queryset=SkosConcept.objects.filter(
            collection__name="gn_feature_code"
        ),
        help_text=GeoNamesPlace._meta.get_field('gn_feature_code').help_text,
        label=GeoNamesPlace._meta.get_field('gn_feature_code').verbose_name,
        method=generous_concept_filter,
        widget=autocomplete.Select2Multiple(
            url="/vocabs-ac/specific-concept-ac/gn_feature_code",
            attrs={
                'data-placeholder': 'Autocomplete ...',
                'data-minimum-input-length': 2,
                },
        )
    )
    gn_country_code = django_filters.ModelMultipleChoiceFilter(
        queryset=SkosConcept.objects.filter(
            collection__name="gn_country_code"
        ),
        help_text=GeoNamesPlace._meta.get_field('gn_country_code').help_text,
        label=GeoNamesPlace._meta.get_field('gn_country_code').verbose_name,
        method=generous_concept_filter,
        widget=autocomplete.Select2Multiple(
            url="/vocabs-ac/specific-concept-ac/gn_country_code",
            attrs={
                'data-placeholder': 'Autocomplete ...',
                'data-minimum-input-length': 2,
                },
        )
    )
    gn_cc2 = django_filters.ModelMultipleChoiceFilter(
        queryset=SkosConcept.objects.filter(
            collection__name="gn_cc2"
        ),
        help_text=GeoNamesPlace._meta.get_field('gn_cc2').help_text,
        label=GeoNamesPlace._meta.get_field('gn_cc2').verbose_name,
        method=generous_concept_filter,
        widget=autocomplete.Select2Multiple(
            url="/vocabs-ac/specific-concept-ac/gn_cc2",
            attrs={
                'data-placeholder': 'Autocomplete ...',
                'data-minimum-input-length': 2,
                },
        )
    )

    class Meta:
        model = GeoNamesPlace
        fields = [
            'id',
            'legacy_id',
            'gn_id',
            'gn_name',
            'gn_lat',
            'gn_long',
            'gn_point',
            'gn_feature_class',
            'gn_feature_code',
            'gn_country_code',
            'gn_cc2',
            'gn_population',
            'gn_elevation',
            'gn_modification_date',
            ]


